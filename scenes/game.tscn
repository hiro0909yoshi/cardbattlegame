[gd_scene load_steps=2 format=3 uid="uid://jtdq4cxo60mv"]

[sub_resource type="GDScript" id="GDScript_8cj0n"]
script/source = "extends Node
class_name Game3D

# 3Dゲームメイン管理スクリプト

# システム参照
var board_system_3d: BoardSystem3D
var player_system: PlayerSystem
var card_system: CardSystem
var battle_system: BattleSystem
var skill_system: SkillSystem
var ui_manager: UIManager
var special_tile_system: SpecialTileSystem
var debug_controller: DebugController

# 設定
var player_count = 2
var player_is_cpu = [false, true]  # Player1=人間, Player2=CPU

func _ready():
	print(\"\\n=== 3Dカルドセプト風ゲーム開始 ===\")
	
	initialize_systems()
	setup_game()
	connect_signals()
	
	# 初期化完了待機
	await get_tree().create_timer(0.5).timeout
	
	start_game()

# システム初期化
func initialize_systems():
	print(\"システム初期化中...\")
	
	# BoardSystem3Dを作成
	board_system_3d = BoardSystem3D.new()
	board_system_3d.name = \"BoardSystem3D\"
	add_child(board_system_3d)
	
	# PlayerSystemを作成
	player_system = PlayerSystem.new()
	player_system.name = \"PlayerSystem\"
	add_child(player_system)
	
	# CardSystemを作成
	card_system = CardSystem.new()
	card_system.name = \"CardSystem\"
	add_child(card_system)
	
	# BattleSystemを作成
	battle_system = BattleSystem.new()
	battle_system.name = \"BattleSystem\"
	add_child(battle_system)
	
	# SkillSystemを作成
	skill_system = SkillSystem.new()
	skill_system.name = \"SkillSystem\"
	add_child(skill_system)
	
	# SpecialTileSystemを作成
	special_tile_system = SpecialTileSystem.new()
	special_tile_system.name = \"SpecialTileSystem\"
	add_child(special_tile_system)
	
	# UIManagerを作成
	ui_manager = UIManager.new()
	ui_manager.name = \"UIManager\"
	add_child(ui_manager)
	
	# DebugControllerを作成
	debug_controller = DebugController.new()
	debug_controller.name = \"DebugController\"
	add_child(debug_controller)
	
	print(\"全システム作成完了\")

# ゲームセットアップ
func setup_game():
	print(\"ゲームセットアップ中...\")
	
	# 3Dシーンのノードを収集
	var tiles_container = get_node_or_null(\"Tiles\")
	var players_container = get_node_or_null(\"Players\")
	var camera = get_node_or_null(\"Camera3D\")
	
	if tiles_container:
		board_system_3d.collect_tiles(tiles_container)
	else:
		print(\"ERROR: Tilesノードが見つかりません\")
	
	if players_container:
		board_system_3d.collect_players(players_container)
	else:
		print(\"ERROR: Playersノードが見つかりません\")
		
	if camera:
		board_system_3d.camera = camera
	else:
		print(\"WARNING: Camera3Dが見つかりません\")
	
	# プレイヤーを初期化
	player_system.initialize_players(player_count, self)
	
	# BoardSystem3Dの設定
	board_system_3d.player_count = player_count
	board_system_3d.player_is_cpu = player_is_cpu
	board_system_3d.current_player_index = 0
	
	# UI作成（UILayerも作成される）
	ui_manager.create_ui(self)
	
	# システム参照を設定
	board_system_3d.setup_systems(player_system, card_system, battle_system, skill_system)
	board_system_3d.ui_manager = ui_manager  # UIManagerを直接設定
	board_system_3d.card_system = card_system  # CardSystemも直接設定
	
	# DebugControllerにシステム参照を設定
	debug_controller.setup_systems(player_system, null, card_system, ui_manager)
	player_system.set_debug_controller(debug_controller)
	
	# 初期手札を配る（UILayer作成後）
	await get_tree().create_timer(0.1).timeout
	card_system.deal_initial_hands_all_players(player_count)
	
	print(\"初期手札を配りました\")
	for i in range(player_count):
		print(\"プレイヤー\", i + 1, \"の手札: \", card_system.get_hand_size_for_player(i), \"枚\")
	
	# UIを初期更新（重要：プレイヤー情報パネルの表示）
	await get_tree().create_timer(0.1).timeout
	ui_manager.update_player_info_panels()
	
	# プレイヤー情報パネルの強制更新
	if ui_manager.player_info_panel and ui_manager.player_info_panel.has_method(\"update_all_panels\"):
		ui_manager.player_info_panel.update_all_panels()
		print(\"プレイヤー情報パネルを更新しました\")
	else:
		print(\"WARNING: player_info_panelが見つかりません\")

# シグナル接続
func connect_signals():
	print(\"シグナル接続中...\")
	
	# PlayerSystemのシグナル
	player_system.dice_rolled.connect(_on_dice_rolled)
	player_system.movement_completed.connect(_on_movement_completed)
	player_system.magic_changed.connect(_on_magic_changed)
	player_system.player_won.connect(_on_player_won)
	
	# BoardSystem3Dのシグナル
	board_system_3d.tile_action_completed.connect(_on_tile_action_completed)
	board_system_3d.movement_started.connect(_on_movement_started)
	board_system_3d.movement_completed.connect(_on_board_movement_completed)
	
	# UIManagerのシグナル
	ui_manager.dice_button_pressed.connect(_on_dice_button_pressed)
	ui_manager.card_selected.connect(_on_card_selected)
	ui_manager.pass_button_pressed.connect(_on_pass_pressed)
	ui_manager.level_up_selected.connect(_on_level_up_selected)
	
	# CardSystemのシグナル
	card_system.card_drawn.connect(_on_card_drawn)
	card_system.card_used.connect(_on_card_used)
	card_system.hand_updated.connect(_on_hand_updated)
	
	print(\"シグナル接続完了\")

# ゲーム開始
func start_game():
	print(\"\\n=== ゲーム開始 ===\")
	
	# 最初のターン開始
	start_turn()

# ターン開始
func start_turn():
	var current_player = player_system.get_current_player()
	print(\"\\n=== プレイヤー\", current_player.id + 1, \"のターン ===\")
	
	# ターン開始時のカードドロー（重要！）
	if card_system.get_hand_size_for_player(current_player.id) < 6:
		print(\"ターン開始時のドロー処理...\")
		var drawn = card_system.draw_card_for_player(current_player.id)
		if not drawn.is_empty():
			print(\"カードをドロー: \", drawn.get(\"name\", \"不明\"))
			ui_manager.update_player_info_panels()
			
			# プレイヤー1の場合、手札表示を更新
			if current_player.id == 0:
				await get_tree().create_timer(0.1).timeout
		else:
			print(\"ドロー失敗（デッキ切れ？）\")
	else:
		print(\"手札が上限のためドローをスキップ\")
	
	# CPUかプレイヤーか判定
	if board_system_3d.player_is_cpu[current_player.id]:
		# CPUの場合
		ui_manager.set_dice_button_enabled(false)
		ui_manager.phase_label.text = \"CPUのターン...\"
		await get_tree().create_timer(1.0).timeout
		board_system_3d.start_dice_roll()
	else:
		# プレイヤーの場合
		ui_manager.set_dice_button_enabled(true)
		ui_manager.phase_label.text = \"サイコロを振ってください\"

# === イベントハンドラ ===

func _on_dice_button_pressed():
	if not board_system_3d.is_moving:
		board_system_3d.start_dice_roll()

func _on_dice_rolled(value: int):
	print(\"🎲 サイコロ: \", value)
	ui_manager.show_dice_result(value, self)
	
	# 3D移動開始
	var current_player = player_system.get_current_player()
	board_system_3d.move_player_3d(current_player.id, value)

func _on_movement_started():
	ui_manager.set_dice_button_enabled(false)
	ui_manager.phase_label.text = \"移動中...\"

func _on_movement_completed(final_tile: int):
	# PlayerSystemの移動完了
	print(\"PlayerSystem: マス\", final_tile, \"に到着\")

func _on_board_movement_completed(final_tile: int):
	# BoardSystem3Dの移動完了
	print(\"BoardSystem3D: マス\", final_tile, \"に到着\")
	board_system_3d.process_tile_landing(final_tile)

func _on_tile_action_completed():
	print(\"タイルアクション完了\")
	# ターン終了処理を呼ぶ
	board_system_3d.end_current_turn()
	# 次のターン開始
	await get_tree().create_timer(0.5).timeout
	start_turn()

func _on_card_selected(card_index: int):
	board_system_3d.on_card_selected(card_index)

func _on_pass_pressed():
	board_system_3d.on_action_pass()

func _on_level_up_selected(target_level: int, cost: int):
	print(\"レベルアップ選択: Lv\", target_level, \" (\", cost, \"G)\")
	# TODO: レベルアップ処理実装

func _on_card_drawn(card_data: Dictionary):
	print(\"カード引いた: \", card_data.get(\"name\", \"不明\"))

func _on_card_used(card_data: Dictionary):
	print(\"カード使用: \", card_data.get(\"name\", \"不明\"))
	ui_manager.update_player_info_panels()

func _on_hand_updated():
	var current_player = player_system.get_current_player()
	if current_player:
		print(\"手札更新 - P\", current_player.id + 1, \": \", card_system.get_hand_size_for_player(current_player.id), \"枚\")

func _on_magic_changed(player_id: int, new_value: int):
	print(\"魔力変化 - P\", player_id + 1, \": \", new_value, \"G\")
	ui_manager.update_player_info_panels()

func _on_player_won(player_id: int):
	print(\"\\n🎉 プレイヤー\", player_id + 1, \"の勝利！ 🎉\")
	ui_manager.set_dice_button_enabled(false)
	ui_manager.phase_label.text = \"プレイヤー\" + str(player_id + 1) + \"の勝利！\"

# デバッグ入力
func _input(event):
	if event is InputEventKey and event.pressed:
		match event.keycode:
			KEY_SPACE:
				_on_dice_button_pressed()
			KEY_6:
				debug_controller.set_debug_dice(6)
			KEY_7:
				debug_controller.set_debug_dice(1)
			KEY_8:
				debug_controller.set_debug_dice(2)
			KEY_9:
				debug_controller.set_debug_dice(3)
			KEY_0:
				debug_controller.clear_debug_dice()
			KEY_D:
				ui_manager.toggle_debug_mode()
"

[node name="Game" type="Node2D"]
script = SubResource("GDScript_8cj0n")

[node name="Hand" type="Node2D" parent="."]

[node name="BoardMap" type="Node2D" parent="."]
